library(rattle)
library(tidyr)
url_train<-"http://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv"
url_test<-"http://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv"
#Read csv
training<-read.csv(url(url_train), na.strings = c("NA","#DIV/0!",""))
testing<-read.csv(url(url_test), na.strings = c("NA","#DIV/0!",""))
inTrain<-createDataPartition(y=training$classe,p=0.6, list=FALSE)
myTraining<-training[inTrain,]
myTesting<-training[-inTrain,]
nvz_train<-nearZeroVar(myTraining, saveMetrics = TRUE)
myTraining<-myTraining[,nvz_train$nvz_train==FALSE]
nvz_test<-nearZeroVar(myTesting, saveMetrics = TRUE)
myTesting<-myTesting[,nvz_test$nvz_test==FALSE]
inTrain<-createDataPartition(y=training$classe,p=0.6, list=FALSE)
myTraining<-training[inTrain,]
myTesting<-training[-inTrain,]
nvz_train<-nearZeroVar(myTraining, saveMetrics = TRUE)
myTraining<-myTraining[,nvz_train$nvz_train==FALSE]
nvz_test<-nearZeroVar(myTesting, saveMetrics = TRUE)
myTesting<-myTesting[,nvz_test$nvz_test==FALSE]
#Remove the first column
myTesting<-myTesting[c(-1)]
View(myTraining)
inTrain<-createDataPartition(y=training$classe,p=0.6, list=FALSE)
myTraining<-training[inTrain,]
myTesting<-training[-inTrain,]
```
**Cleaning the data**
```{r}
#Remove near zero variables
nvz_train<-nearZeroVar(myTraining, saveMetrics = TRUE)
myTraining<-myTraining[,nvz_train$nvz==FALSE]
nvz_test<-nearZeroVar(myTesting, saveMetrics = TRUE)
myTesting<-myTesting[,nvz_test$nvz==FALSE]
#Remove the first column
myTesting<-myTesting[c(-1)]
inTrain<-createDataPartition(y=training$classe,p=0.6, list=FALSE)
myTraining<-training[inTrain,]
myTesting<-training[-inTrain,]
nvz_train<-nearZeroVar(myTraining, saveMetrics = TRUE)
myTraining<-myTraining[,nvz_train$nvz==FALSE]
nvz_test<-nearZeroVar(myTesting, saveMetrics = TRUE)
myTesting<-myTesting[,nvz_test$nvz==FALSE]
#Remove the first column
myTraining<-myTraining[c(-1)]
inTrain<-createDataPartition(y=training$classe,p=0.6, list=FALSE)
myTraining<-training[inTrain,]
myTesting<-training[-inTrain,]
nzv_train<-nearZeroVar(myTraining, saveMetrics = TRUE)
myTraining<-myTraining[,nzv_train$nzv==FALSE]
nzv_test<-nearZeroVar(myTesting, saveMetrics = TRUE)
myTesting<-myTesting[,nzv_test$nzv=FALSE]
#Remove the first column
myTraining<-myTraining[c(-1)]
nzv_test<-nearZeroVar(myTesting, saveMetrics = TRUE)
myTesting<-myTesting[,nzv_test$nzv==FALSE]
length(myTraining)
myTrainingTemp<-myTraining
for (i in 1:length(myTraining)) {
if (sum(is.na(myTraining[,i]))/nrow(myTraining) >= .6) {
for (j in 1:length(myTrainingTemp)) {
if (length(grep(names(myTraining[i]),names(myTrainingTemp[j])))==1) {
myTrainingTemp<-myTrainingTemp[,c(-j)]
}
}
}
}
myTrainingTemp<-myTraining
for (i in 1:length(myTraining)) {
if (sum(is.na(myTraining[,i]))/nrow(myTraining) >= .6) {
for (j in 1:length(myTrainingTemp)) {
if (length(grep(names(myTraining[i]),names(myTrainingTemp[j])))==1) {
myTrainingTemp<-myTrainingTemp[,-j]
}
}
}
}
myTrainingTemp<-myTraining
for (i in 1:length(myTraining)) {
if (sum(is.na(myTraining[,i]))/nrow(myTraining) >= .6) {
for (j in 1:length(myTrainingTemp)) {
if (length(grep(names(myTraining[i]),names(myTrainingTemp)[j]))==1) {
myTrainingTemp<-myTrainingTemp[,-j]
}
}
}
}
training<-read.csv(url(url_train), na.strings = c("NA","#DIV/0!",""))
testing<-read.csv(url(url_test), na.strings = c("NA","#DIV/0!",""))
inTrain<-createDataPartition(y=training$classe,p=0.6, list=FALSE)
myTraining<-training[inTrain,]
myTesting<-training[-inTrain,]
nzv_train<-nearZeroVar(myTraining, saveMetrics = TRUE)
myTraining<-myTraining[,nzv_train$nzv==FALSE]
nzv_test<-nearZeroVar(myTesting, saveMetrics = TRUE)
myTesting<-myTesting[,nzv_test$nzv==FALSE]
#Remove the first column
myTraining<-myTraining[c(-1)]
#Remove column with more than 60%
myTrainingTemp<-myTraining
for (i in 1:length(myTraining)) {
if (sum(is.na(myTraining[,i]))/nrow(myTraining) >= .6) {
for (j in 1:length(myTrainingTemp)) {
if (length(grep(names(myTraining[i]),names(myTrainingTemp)[j]))==1) {
myTrainingTemp<-myTrainingTemp[,-j]
}
}
}
}
myTraining<-myTrainingTemp
rm(myTrainingTemp)
#Apply same filter to myTesting and testing dataset
clean1<-colnames(myTraining)
clean2<-colnames(myTraining[,-58])
myTesting<-myTesting[clean1]
testing<-testing[clean2]
for (i in 1:length(testing)) {
for (j in 1:length(myTraining)) {
if (length(grep(names(myTraining[i]),names(testing)[j]))==1) {
class(testing[i])<-class(myTraining[j])
}
}
}
rbind(myTraining[2, -58] , testing)
testing <- rbind(myTraining[2, -58] , testing)
testing <- testing[-1,]
modFit1<-train(classe~.,data=myTraining,method="rpart")
fancyRpartPlot(modFit1$finalModel)
install.packages("rpart.plot")
fancyRpartPlot(modFit1$finalModel)
pred1<-predict(modFit1,myTesting)
confusionMatrix(pred1,myTesting$classe)
set.seed(1234)
modFit1<-rpart(classe~.,data=myTraining,method="class")
fancyRpartPlot(modFit1$finalModel)
```
**Predicting on myTesting dataset**
```{r}
pred1<-predict(modFit1,myTesting)
confusionMatrix(pred1,myTesting$classe)
)
modFit1<-rpart(classe~.,data=myTraining,method="class")
fancyRpartPlot(modFit1)
pred1<-predict(modFit1,myTesting,type="class")
confusionMatrix(pred1,myTesting$classe)
modFit1<-train(classe~.,data=myTraining,method="rpart")
fancyRpartPlot(modFit1$finalModel)
)
pred1<-predict(modFit1,myTesting)
confusionMatrix(pred1,myTesting$classe)
pred2<-predict(modFit1,testing)
confusionMatrix(pred2,testing$classe)
g<-ggplot(data=myTraining, aes(classe))
g+geom_histogram()
g+geom_histogram(stat = "count")
g<-ggplot(data=myTraining, aes(myTraining$classe))
g+geom_histogram()
g+geom_histogram(stat = "count")
g<-ggplot(data=myTraining, aes(x=myTraining$classe))
g+geom_histogram(stat = "count")
g+geom_histogram()
hist(myTraining$classe)
hist(as.numeric(myTraining$classe))
modFit2<-train(classe~.,data=myTraining,method="rf",trControl=trainControl(method = "cv"))
modFit2<-train(classe~.,data=myTraining,method="rf",trControl=trainControl(method = "cv"))
version
library(plotly)
library(plotly)
install.packages("ggplot2",type="source")
version(ggplot2)
library(plotly)
plot_ly(mtcars, x=wt, y=mpg, mode="markers", color = hp)
library(UsingR)
plot_ly(mtcars, x=wt, y=mpg, mode="markers", color = hp)
str(mtcars)
plot_ly(mtcars, x= wt, y= mpg, mode="markers", color = as.factor(cyl))
plot_ly(data=mtcars, x= wt, y= mpg, mode="markers", color = as.factor(cyl))
plot_ly(mtcars, x= wt, y= mpg, mode="markers", color = as.factor(cyl))
data("mtcars")
plot_ly(mtcars, x= wt, y= mpg, mode="markers", color = as.factor(cyl))
plot_ly(mtcars, x= mtcars$wt, y= mtcars$mpg, mode="markers", color = as.factor(mtcars$cyl))
set.seed(1234)
temp<-rnorm(100, mean=30, sd=5)
pressure<-rnorm(100)
time<-1:100
plot_ly(x=temp,y=pressure,z=time, mode="3d scatter", color=temp)
plot_ly(x=temp,y=pressure,z=time, type="scatter3d", color=temp)
plot_ly(x=temp,y=pressure,z=time, type="scatter3d", color=temp, mode="marker")
plot_ly(x=temp,y=pressure,z=time, type="scatter3d", color=temp, mode="markers")
plot_ly(x=temp,y=pressure,z=time, type="scatter3d", color=temp, mode="markers")
install.packages("leaflet")
library(leaflet)
install.packages("raster")
install.packages("leaflet",type="source")
library(leaflet)
my_map<-leaflet() %>%
addTiles()
my_map
my_map<-leaflet() %>%
addMarkers(lat=39.2980803, lng=-76,589, popup = 'JHU')
my_map
my_map<-leaflet() %>%
addTiles()
my_map<-my_map %>%
addMarkers(lat=39.2980803, lng=-76,589, popup = 'JHU')
my_map
uni_coords <- data.frame(lat=c(33.6416999,21.0039703,45.8084854),
lng=c(-117.8562569,105.8398545,9.0878271))
uni_popup <- c("UCI", "NUCE", "Polimi")
uni_coords %>%
leaflet() %>%
addTiles() %>%
addMarkers(popup=uni_popup)
library(shiny)
library(imager)
library(plotly)
library(caret)
library(dplyr)
install.packages()
y = "http://i4.irishmirror.ie/incoming/article7265078.ece/ALTERNATES/s615/Manchester-United-European-Cup-winning-team-poses-with-the-trophy-at-Old-Trafford-1968.jpg"
download.file(y,'y.png', mode = 'wb')
foo<-load.image('y.png')
foo1<-foo[,,,1]+foo[,,,2]+foo[,,,2]
foo1<-t(foo1[,c(409:1)])
noface_feat<-matrix(
c(c(245, 330, 160, 20),
c(200, 240, 280, 250),
c(50, 150, 120, 40)),
nrow=3,
ncol=4,
byrow = TRUE
)
face_feat<-matrix(
c(c(288, 322, 240, 200),
c(370, 400, 235, 190),
c(335, 365, 327, 290),
c(130, 160, 225, 185),
c(520, 552, 340, 297),
c(190, 220, 330, 290),
c(210, 245, 235, 205),
c(120, 150, 310, 270)),
nrow = 8,
ncol = 4,
byrow = TRUE
)
num1<-4
raining <- data.frame(z= factor(),
Face= factor())
for (i in c(1:num1)) {
b<-foo1[face_feat[i,3]:face_feat[i,4], face_feat[i,1]:face_feat[i,2]]
temp<-data.frame(z=as.factor(b),
Face=as.factor(rep.int(1, dim(b)[1]*dim(b)[2])))
training<-bind_rows(training, temp)
}
for (j in c(1:3)) {
c<-foo1[noface_feat[j,3]:noface_feat[j,4], noface_feat[j,1]:noface_feat[j,2]]
tempc<-data.frame(z=as.factor(c),
Face=as.factor(rep.int(0, dim(c)[1]*dim(c)[2])))
training<-bind_rows(training, tempc)
}
training <- data.frame(z= factor(),
Face= factor())
for (i in c(1:num1)) {
b<-foo1[face_feat[i,3]:face_feat[i,4], face_feat[i,1]:face_feat[i,2]]
temp<-data.frame(z=as.factor(b),
Face=as.factor(rep.int(1, dim(b)[1]*dim(b)[2])))
training<-bind_rows(training, temp)
}
for (j in c(1:3)) {
c<-foo1[noface_feat[j,3]:noface_feat[j,4], noface_feat[j,1]:noface_feat[j,2]]
tempc<-data.frame(z=as.factor(c),
Face=as.factor(rep.int(0, dim(c)[1]*dim(c)[2])))
training<-bind_rows(training, tempc)
}
modFit<-train(Face~., data=training, method="rf", prox=TRUE)
library(shiny)
library(plotly)
library(readr)
library(h2o)
h2o.init()
model<<-h2o.loadModel("DeepLearning_model_R_1485633846874_1")
model<-h2o.loadModel("DeepLearning_model_R_1485633846874_1")
h2o.shutdown()
h2o.init()
model<<-h2o.loadModel("DeepLearning_model_R_1485633846874_1")
setwd("~/Documents/Data_Science_JHU/RFURF/road_finding")
model<<-h2o.loadModel("DeepLearning_model_R_1485633846874_1")
model<-h2o.loadModel("DeepLearning_model_R_1485633846874_1")
h2o.shutdown()
library(h2o)
h2o.init()
model<<-h2o.loadModel("DeepLearning_model_R_1485633846874_1")
test<-read_csv("test1.csv")
h<-runif(1,1, dim(test)[1])
test_h2o<-as.h2o(test[h,-1])
temp_img<-matrix(unlist(test[h,-1]),nrow=28, byrow=T)
temp_img<-t(temp_img[,c(28:1)])
p<-plot_ly(x=1:28,y=1:28,z=t(temp_img),type="heatmap",colors="Greys") %>%
layout(title="Random Test Image", xaxis=list(ticks="", showticklabels=FALSE), yaxis=list(ticks="", showticklabels=FALSE))
p
temp_img<-matrix(unlist(test[h,-1]),nrow=28, byrow=T)
temp_img<-t(temp_img[,c(28:1)])
p<-plot_ly(x=1:28,y=1:28,z=temp_img,type="heatmap",colors="Greys") %>%
layout(title="Random Test Image", xaxis=list(ticks="", showticklabels=FALSE), yaxis=list(ticks="", showticklabels=FALSE))
p
temp_img<-matrix(unlist(test[h,-1]),nrow=28, byrow=T)
temp_img<-t(temp_img[c(28:1),])
p<-plot_ly(x=1:28,y=1:28,z=temp_img,type="heatmap",colors="Greys") %>%
layout(title="Random Test Image", xaxis=list(ticks="", showticklabels=FALSE), yaxis=list(ticks="", showticklabels=FALSE))
p
h<-runif(1,1, dim(test)[1])
test_h2o<-as.h2o(test[h,-1])
temp_img<-matrix(unlist(test[h,-1]),nrow=28, byrow=T)
temp_img<-t(temp_img[c(28:1),])
p<-plot_ly(x=1:28,y=1:28,z=t(temp_img),type="heatmap",colors="Greys") %>%
layout(title="Random Test Image", xaxis=list(ticks="", showticklabels=FALSE), yaxis=list(ticks="", showticklabels=FALSE))
p
temp_img<-matrix(unlist(test[h,-1]),nrow=28, byrow=T)
temp_img<-t(temp_img[,c(28:1)])
p<-plot_ly(x=1:28,y=1:28,z=t(temp_img),type="heatmap",colors="Greys") %>%
layout(title="Random Test Image", xaxis=list(ticks="", showticklabels=FALSE), yaxis=list(ticks="", showticklabels=FALSE))
p
temp_img<-matrix(unlist(test[h,-1]),nrow=28, byrow=T)
temp_img<-t(temp_img[,c(28:1)])
p<-plot_ly(x=1:28,y=1:28,z=(temp_img),type="heatmap",colors="Greys") %>%
layout(title="Random Test Image", xaxis=list(ticks="", showticklabels=FALSE), yaxis=list(ticks="", showticklabels=FALSE))
p
temp_img<-matrix(unlist(test[h,-1]),nrow=28, byrow=T)
temp_img<-t(temp_img)
p<-plot_ly(x=1:28,y=1:28,z=(temp_img),type="heatmap",colors="Greys") %>%
layout(title="Random Test Image", xaxis=list(ticks="", showticklabels=FALSE), yaxis=list(ticks="", showticklabels=FALSE))
p
temp_img<-matrix(unlist(test[h,-1]),nrow=28, byrow=T)
p<-plot_ly(x=1:28,y=1:28,z=(temp_img),type="heatmap",colors="Greys") %>%
layout(title="Random Test Image", xaxis=list(ticks="", showticklabels=FALSE), yaxis=list(ticks="", showticklabels=FALSE))
p
h<-runif(1,1, dim(test)[1])
test_h2o<-as.h2o(test[h,-1])
temp_img<-matrix(unlist(test[h,-1]),nrow=28, byrow=T)
p<-plot_ly(x=1:28,y=1:28,z=(temp_img),type="heatmap",colors="Greys") %>%
layout(title="Random Test Image", xaxis=list(ticks="", showticklabels=FALSE), yaxis=list(ticks="", showticklabels=FALSE))
p
h<-runif(1,1, dim(test)[1])
test_h2o<-as.h2o(test[h,-1])
temp_img<-matrix(unlist(test[h,-1]),nrow=28, byrow=T)
p<-plot_ly(x=1:28,y=1:28,z=(temp_img),type="heatmap",colors="Greys") %>%
layout(title="Random Test Image", xaxis=list(ticks="", showticklabels=FALSE), yaxis=list(ticks="", showticklabels=FALSE))
p
temp_img<-matrix(unlist(test[h,-1]),nrow=28, byrow=T)
p<-plot_ly(x=1:28,y=1:28,z=(temp_img[,c(28:1)]),type="heatmap",colors="Greys") %>%
layout(title="Random Test Image", xaxis=list(ticks="", showticklabels=FALSE), yaxis=list(ticks="", showticklabels=FALSE))
p
temp_img<-matrix(unlist(test[h,-1]),nrow=28, byrow=T)
p<-plot_ly(x=1:28,y=1:28,z=(temp_img[c(28:1),]),type="heatmap",colors="Greys") %>%
layout(title="Random Test Image", xaxis=list(ticks="", showticklabels=FALSE), yaxis=list(ticks="", showticklabels=FALSE))
p
h<-runif(1,1, dim(test)[1])
test_h2o<-as.h2o(test[h,-1])
temp_img<-matrix(unlist(test[h,-1]),nrow=28, byrow=T)
p<-plot_ly(x=1:28,y=1:28,z=(temp_img[c(28:1),]),type="heatmap",colors="Greys") %>%
layout(title="Random Test Image", xaxis=list(ticks="", showticklabels=FALSE), yaxis=list(ticks="", showticklabels=FALSE))
p
h<-runif(1,1, dim(test)[1])
test_h2o<-as.h2o(test[h,-1])
temp_img<-matrix(unlist(test[h,-1]),nrow=28, byrow=T)
p<-plot_ly(x=1:28,y=1:28,z=(temp_img[c(28:1),]),type="heatmap",colors="Greys") %>%
layout(title="Random Test Image", xaxis=list(ticks="", showticklabels=FALSE), yaxis=list(ticks="", showticklabels=FALSE))
p
h<-runif(1,1, dim(test)[1])
test_h2o<-as.h2o(test[h,-1])
temp_img<-matrix(unlist(test[h,-1]),nrow=28, byrow=T)
p<-plot_ly(x=1:28,y=1:28,z=(temp_img[c(28:1),]),type="heatmap",colors="Greys") %>%
layout(title="Random Test Image", xaxis=list(ticks="", showticklabels=FALSE), yaxis=list(ticks="", showticklabels=FALSE))
p
h<-runif(1,1, dim(test)[1])
test_h2o<-as.h2o(test[h,-1])
temp_img<-matrix(unlist(test[h,-1]),nrow=28, byrow=T)
p<-plot_ly(x=1:28,y=1:28,z=(temp_img[c(28:1),]),type="heatmap",colors="Greys") %>%
layout(title="Random Test Image", xaxis=list(ticks="", showticklabels=FALSE), yaxis=list(ticks="", showticklabels=FALSE))
p
res<-h2o.predict(model, test_h2o)
res
res$predicr
res$predict
h<-runif(1,1, dim(test)[1])
test_h2o<-as.h2o(test[h,-1])
temp_img<-matrix(unlist(test[h,-1]),nrow=28, byrow=T)
p<-plot_ly(x=1:28,y=1:28,z=(temp_img[c(28:1),]),type="heatmap",colors="Greys") %>%
layout(title="Random Test Image", xaxis=list(ticks="", showticklabels=FALSE), yaxis=list(ticks="", showticklabels=FALSE))
p
res<-h2o.predict(model, test_h2o)
res$predict
h<-runif(1,1, dim(test)[1])
test_h2o<-as.h2o(test[h,-1])
temp_img<-matrix(unlist(test[h,-1]),nrow=28, byrow=T)
p<-plot_ly(x=1:28,y=1:28,z=(temp_img[c(28:1),]),type="heatmap",colors="Greys") %>%
layout(title="Random Test Image", xaxis=list(ticks="", showticklabels=FALSE), yaxis=list(ticks="", showticklabels=FALSE))
p
res<-h2o.predict(model, test_h2o)
res$predict
h<-runif(1,1, dim(test)[1])
test_h2o<-as.h2o(test[h,-1])
temp_img<-matrix(unlist(test[h,-1]),nrow=28, byrow=T)
p<-plot_ly(x=1:28,y=1:28,z=(temp_img[c(28:1),]),type="heatmap",colors="Greys") %>%
layout(title="Random Test Image", xaxis=list(ticks="", showticklabels=FALSE), yaxis=list(ticks="", showticklabels=FALSE))
p
res<-h2o.predict(model, test_h2o)
res$predict
h<-runif(1,1, dim(test)[1])
test_h2o<-as.h2o(test[h,-1])
temp_img<-matrix(unlist(test[h,-1]),nrow=28, byrow=T)
p<-plot_ly(x=1:28,y=1:28,z=(temp_img[c(28:1),]),type="heatmap",colors="Greys") %>%
layout(title="Random Test Image", xaxis=list(ticks="", showticklabels=FALSE), yaxis=list(ticks="", showticklabels=FALSE))
p
res<-h2o.predict(model, test_h2o)
res$predict
h<-runif(1,1, dim(test)[1])
test_h2o<-as.h2o(test[h,-1])
temp_img<-matrix(unlist(test[h,-1]),nrow=28, byrow=T)
p<-plot_ly(x=1:28,y=1:28,z=(temp_img[c(28:1),]),type="heatmap",colors="Greys") %>%
layout(title="Random Test Image", xaxis=list(ticks="", showticklabels=FALSE), yaxis=list(ticks="", showticklabels=FALSE))
p
res<-h2o.predict(model, test_h2o)
res$predict
h<-runif(1,1, dim(test)[1])
test_h2o<-as.h2o(test[h,-1])
temp_img<-matrix(unlist(test[h,-1]),nrow=28, byrow=T)
p<-plot_ly(x=1:28,y=1:28,z=(temp_img[c(28:1),]),type="heatmap",colors="Greys") %>%
layout(title="Random Test Image", xaxis=list(ticks="", showticklabels=FALSE), yaxis=list(ticks="", showticklabels=FALSE))
p
res<-h2o.predict(model, test_h2o)
res$predict
h<-runif(1,1, dim(test)[1])
test_h2o<-as.h2o(test[h,-1])
temp_img<-matrix(unlist(test[h,-1]),nrow=28, byrow=T)
p<-plot_ly(x=1:28,y=1:28,z=(temp_img[c(28:1),]),type="heatmap",colors="Greys") %>%
layout(title="Random Test Image", xaxis=list(ticks="", showticklabels=FALSE), yaxis=list(ticks="", showticklabels=FALSE))
p
res<-h2o.predict(model, test_h2o)
res$predict
h<-runif(1,1, dim(test)[1])
test_h2o<-as.h2o(test[h,-1])
temp_img<-matrix(unlist(test[h,-1]),nrow=28, byrow=T)
p<-plot_ly(x=1:28,y=1:28,z=(temp_img[c(28:1),]),type="heatmap",colors="Greys") %>%
layout(title="Random Test Image", xaxis=list(ticks="", showticklabels=FALSE), yaxis=list(ticks="", showticklabels=FALSE))
p
res<-h2o.predict(model, test_h2o)
res$predict
runApp()
runApp()
runApp()
?plot_ly
runApp()
runApp()
runApp()
runApp()
runApp()
test<-read_csv("test1.csv")
h<-runif(1,1, dim(test)[1])
test<-read_csv("test1.csv")
test_h2o<-as.h2o(test[h,-1])
res<-h2o.predict(model, test_h2o)
res1<-as.character(res)
res1
res1<-as.character(res$predict)
res1
res1[1,1]
paste("The classification result is: ", res1[1,1])
runApp()
test<-read_csv("test1.csv")
test_h2o<-as.h2o(test[h,-1])
res<-h2o.predict(model, test_h2o)
res1<-as.character(res$predict)
paste("The classification result is: ", res1[1,1])
runApp()
runApp()
h2o.init()
model<-h2o.loadModel("DeepLearning_model_R_1485633846874_1")
test<-read_csv("test1.csv")
test_h2o<-as.h2o(test[h,-1])
res<-h2o.predict(model, test_h2o)
res1<-as.character(res$predict)
paste("The classification result is:", res1[1,1])
h2o.shutdown(prompt = F)
h2o.init()
model<-h2o.loadModel("DeepLearning_model_R_1485633846874_1")
test<-read_csv("test1.csv")
test_h2o<-as.h2o(test[h,-1])
res<-h2o.predict(model, test_h2o)
res1<-as.character(res$predict)
paste("The classification result is:", res1[1,1])
runApp()
runApp()
test<-read_csv("test1.csv")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
setwd("~/Documents/Data_Science_JHU/RFURF/hand_digits")
